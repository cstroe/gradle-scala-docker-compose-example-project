plugins {
    id "com.github.maiflai.scalatest" version "0.18"
    // https://github.com/avast/gradle-docker-compose-plugin
    id 'com.avast.gradle.docker-compose' version "0.8.12"
    id 'com.github.johnrengelman.shadow' version '2.0.1'
}

apply plugin: 'scala'

repositories {
    mavenCentral()
    jcenter()
}

sourceSets {
    integrationTest {
        scala {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/it/scala')
        }
        resources.srcDir file('src/it/resources')
    }
}

jar {
    manifest {
        attributes 'Main-Class': 'com.github.cstroe.example.Main'
    }
}

shadowJar {
    baseName = 'app'
    classifier = null
    version = null
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath

    doFirst {
        dockerCompose.exposeAsEnvironment(integrationTest)
    }
}

composeUp.dependsOn shadowJar
integrationTest.dependsOn composeUp
composeUp.mustRunAfter integrationTestClasses
integrationTest.finalizedBy composeDown
check.dependsOn integrationTest

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// In this section you declare the dependencies for your production and test code
dependencies {
    compile 'org.scala-lang:scala-library:2.12.4'
    compile 'org.scala-lang:scala-reflect:2.12.4'
    compile 'org.apache.logging.log4j:log4j-api:2.8.2'
    runtime 'org.apache.logging.log4j:log4j-core:2.8.2'

    testCompile 'org.scalatest:scalatest_2.12:3.0.4'
    testRuntime 'org.pegdown:pegdown:1.4.2'

    integrationTestCompile 'org.scalaj:scalaj-http_2.12:2.3.0'
}

//// Uncomment this to show task graph when running tasks.
//// Useful for debugging your Gradle task graph.
//gradle.taskGraph.whenReady {taskGraph ->
//    println "Found task graph: " + taskGraph
//    println "Found " + taskGraph.allTasks.size() + " tasks."
//    taskGraph.allTasks.forEach { task ->
//        println task
//        task.dependsOn.forEach { dep ->
//            println "  - " + dep
//        }
//    }
//}

